{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Hyperion The special task processing tool Main goals At lot of things are planned (and already started): written in Java running on all platforms document in YAML format supporting tasks Powershell (code as .ps1 or embedded, Windows) Batch (code as .bat or .cmd or embedded, Windows) JShell (code as .java or .jsh or embedded, all platforms) Groovy (code as .groovy or embedded, all platforms) Kotlin (code as .kt or embedded, all platforms) file system operation (copy, move, delete of files and folders) storing results into a task variable (optional with regex) Docker supporting task groups running tasks in order or in parallel supporting models (flexible structure under your control) supporting matrix (running same task groups multiple times for different variables) supporting templating (reference values from variables or the model) tags on tasks and task groups to allow filtering conditional task execution remote execution (client/server mode) reports","title":"Home"},{"location":"#welcome-to-hyperion","text":"The special task processing tool","title":"Welcome to Hyperion"},{"location":"#main-goals","text":"At lot of things are planned (and already started): written in Java running on all platforms document in YAML format supporting tasks Powershell (code as .ps1 or embedded, Windows) Batch (code as .bat or .cmd or embedded, Windows) JShell (code as .java or .jsh or embedded, all platforms) Groovy (code as .groovy or embedded, all platforms) Kotlin (code as .kt or embedded, all platforms) file system operation (copy, move, delete of files and folders) storing results into a task variable (optional with regex) Docker supporting task groups running tasks in order or in parallel supporting models (flexible structure under your control) supporting matrix (running same task groups multiple times for different variables) supporting templating (reference values from variables or the model) tags on tasks and task groups to allow filtering conditional task execution remote execution (client/server mode) reports","title":"Main goals"},{"location":"cli/","text":"CLI In future the code might move to an own individual respository. Nevertheless it should be documented how it works... Defining an option The creation of an option is best explained by an example: final var option = CliOption.builder() .setLongName(\"file\") .setShortName(\"f\") .setDescription(\"Provide document to process\") .setType(OptionType.STRING) .setRequired(true) .setRepeatable(false) .build(); The build() will throw an CliException when the validation of your definition has failed. Long names The field is required. A long name has to be lower case. You can combine as maximum three so called sub names namea-nameb-namec by dashes. Each subname has to start with a letter; then also numbers may be used (no other characters). it's not allowed to have less than 2 characters and no more than 15 characters. You can use the long name in two forms: --name=value --name value Short names The field is option (null or empty counts as not set). A short name can be upper case or lower case. You are allowed to define one character only (length equal to 1). You can use the short name in two forms: -v1234 -v 1234 Description The field is required It cannot be null and also not be empty The length may not exceed 40 characters. Keep in mind that this description should help the user. Repeatable The default is false (not repeatable). A repeatable option means that under given name a list of values is stored. The repeatable flag is shown in the help. Required The default is false (not required). A required field means that you have to specify the parameter. The required flag is shown in the help. Special scenario : consider a --help (which should be optional). If you (as an example) specify the option --file as required the CliParser will throw a CliException if you just use --help. You can define a command and with such an option (example: run). Only if you use that command you also have to specify the required option. Type The types are boolean, string, integer, double and path (for now). The default is string. The boolean means that you don't expect a value. The types are currently used for the help only to show what value is expected. Validation The build() function checks the rules as described before throwing a CliException when validation has failed. Defining a command The creation of a command is working pretty the same way as for the options. The definition of the command options is exactly the same thing. final var command = CliCommand.builder() .setName(\"run\") .setDescription(\"processing a document with tasks\") .addOption(fileOption) .build(); Name The name is required. The name should have at least two characters, and the length must not exceed 10 characters. The name has to be lower case. Description The field is required It cannot be null and also not be empty Option you can call addOption (several times) to add one option. you can call addAllOption (several times) to add a list of options. Validation The build() function checks the rules as described below throwing a CliException when validation has failed. checking for name and description checking for options a long name may exist once only a short name may exist once only a description may exist once only The option list The option list (CliOptionList) is special class keeping a list of options working with the builder options as already seen for the other classes. The build() function finally does also the validation: a long name may exist once only a short name may exist once only a description may exist once only These option list is required for the parser. Using the parser The parser does parse the command line arguments. final var parser = CliParser.builder() .setGlobalOptions(globalOptions) .setCommands(commands) .build(); final var result = parser.parse(arguments); Global options You set the list of global options (see option list - CliOptionList). Commands You have two options: using setCommands to set a list of commands (old commands are lost). using addCommand (several times) to add one command. Validation when parsing While parsing the command line arguments further validation is done: required options that are missing repeated options that are not defined repeatable if you use more than once command unknown options unknown commands Please note : You have to use global options before any command If you want to use required options don't use them on global options otherwise you run into problems when trying to use --help (as an example). Simply define a command for it. Using the result When the parsing is fine you get an instance of type CliResult and you three information are available then: with getGlobalOptions() you get a map where the key is the long name of the option the value is a list; if the option is repeatable it contains more than one value. same for getCommandOptions() . with getCommandName() you get the command. It's on you how you handle it. Help printer The setup of the help printer works similar as the parser. In addition to the defined options and commands you specify the execution, the product version, the build timestamp and the author: private void printHelp() throws CliException { final var helpPrinter = CliHelpPrinter.builder() .setExecution(\"java -jar \" + this.properties.getProperty(PROPERTY_FINAL_NAME) + \".jar\") .setProductVersion(this.properties.getProperty(PROPERTY_PRODUCT_VERSION)) .setBuildTimestamp(this.properties.getProperty(PROPERTY_BUILD_TIMESTAMP)) .setAuthor(this.properties.getProperty(PROPERTY_AUTHOR)) .setGlobalOptions(this.globalOptions) .setCommands(this.commands) .build(); helpPrinter.print(LoggerFactory.getLogger(\"HELP\")::info); } The code is extracted from the Hyperion application as I'm using it iself. With Maven and resource filtering I'm passing the information like the final name of the jar, the product version, the build timestamp and the author. For the logging I'm using a custom logger to avoid the usually timestamped output. At the time when I'm writing this documentation the result did look like following: java -jar hyperion-1.0.0-SNAPSHOT.jar [global options] [command [command options]] version: 1.0.0-SNAPSHOT, build timestamp: 2021-05-14 15:21 author: Thomas Lehmann <thomas.lehmann.private@gmail.com> Global options: -h, --help - displaying this help --third-party - displaying used 3rd party libraries List of available commands: run - Running one document with tasks to be processed Options for command 'run': -f<path>, --file=<path> - Document with tasks to be processed [required]","title":"CLI"},{"location":"cli/#cli","text":"In future the code might move to an own individual respository. Nevertheless it should be documented how it works...","title":"CLI"},{"location":"cli/#defining-an-option","text":"The creation of an option is best explained by an example: final var option = CliOption.builder() .setLongName(\"file\") .setShortName(\"f\") .setDescription(\"Provide document to process\") .setType(OptionType.STRING) .setRequired(true) .setRepeatable(false) .build(); The build() will throw an CliException when the validation of your definition has failed.","title":"Defining an option"},{"location":"cli/#long-names","text":"The field is required. A long name has to be lower case. You can combine as maximum three so called sub names namea-nameb-namec by dashes. Each subname has to start with a letter; then also numbers may be used (no other characters). it's not allowed to have less than 2 characters and no more than 15 characters. You can use the long name in two forms: --name=value --name value","title":"Long names"},{"location":"cli/#short-names","text":"The field is option (null or empty counts as not set). A short name can be upper case or lower case. You are allowed to define one character only (length equal to 1). You can use the short name in two forms: -v1234 -v 1234","title":"Short names"},{"location":"cli/#description","text":"The field is required It cannot be null and also not be empty The length may not exceed 40 characters. Keep in mind that this description should help the user.","title":"Description"},{"location":"cli/#repeatable","text":"The default is false (not repeatable). A repeatable option means that under given name a list of values is stored. The repeatable flag is shown in the help.","title":"Repeatable"},{"location":"cli/#required","text":"The default is false (not required). A required field means that you have to specify the parameter. The required flag is shown in the help. Special scenario : consider a --help (which should be optional). If you (as an example) specify the option --file as required the CliParser will throw a CliException if you just use --help. You can define a command and with such an option (example: run). Only if you use that command you also have to specify the required option.","title":"Required"},{"location":"cli/#type","text":"The types are boolean, string, integer, double and path (for now). The default is string. The boolean means that you don't expect a value. The types are currently used for the help only to show what value is expected.","title":"Type"},{"location":"cli/#validation","text":"The build() function checks the rules as described before throwing a CliException when validation has failed.","title":"Validation"},{"location":"cli/#defining-a-command","text":"The creation of a command is working pretty the same way as for the options. The definition of the command options is exactly the same thing. final var command = CliCommand.builder() .setName(\"run\") .setDescription(\"processing a document with tasks\") .addOption(fileOption) .build();","title":"Defining a command"},{"location":"cli/#name","text":"The name is required. The name should have at least two characters, and the length must not exceed 10 characters. The name has to be lower case.","title":"Name"},{"location":"cli/#description_1","text":"The field is required It cannot be null and also not be empty","title":"Description"},{"location":"cli/#option","text":"you can call addOption (several times) to add one option. you can call addAllOption (several times) to add a list of options.","title":"Option"},{"location":"cli/#validation_1","text":"The build() function checks the rules as described below throwing a CliException when validation has failed. checking for name and description checking for options a long name may exist once only a short name may exist once only a description may exist once only","title":"Validation"},{"location":"cli/#the-option-list","text":"The option list (CliOptionList) is special class keeping a list of options working with the builder options as already seen for the other classes. The build() function finally does also the validation: a long name may exist once only a short name may exist once only a description may exist once only These option list is required for the parser.","title":"The option list"},{"location":"cli/#using-the-parser","text":"The parser does parse the command line arguments. final var parser = CliParser.builder() .setGlobalOptions(globalOptions) .setCommands(commands) .build(); final var result = parser.parse(arguments);","title":"Using the parser"},{"location":"cli/#global-options","text":"You set the list of global options (see option list - CliOptionList).","title":"Global options"},{"location":"cli/#commands","text":"You have two options: using setCommands to set a list of commands (old commands are lost). using addCommand (several times) to add one command.","title":"Commands"},{"location":"cli/#validation-when-parsing","text":"While parsing the command line arguments further validation is done: required options that are missing repeated options that are not defined repeatable if you use more than once command unknown options unknown commands Please note : You have to use global options before any command If you want to use required options don't use them on global options otherwise you run into problems when trying to use --help (as an example). Simply define a command for it.","title":"Validation when parsing"},{"location":"cli/#using-the-result","text":"When the parsing is fine you get an instance of type CliResult and you three information are available then: with getGlobalOptions() you get a map where the key is the long name of the option the value is a list; if the option is repeatable it contains more than one value. same for getCommandOptions() . with getCommandName() you get the command. It's on you how you handle it.","title":"Using the result"},{"location":"cli/#help-printer","text":"The setup of the help printer works similar as the parser. In addition to the defined options and commands you specify the execution, the product version, the build timestamp and the author: private void printHelp() throws CliException { final var helpPrinter = CliHelpPrinter.builder() .setExecution(\"java -jar \" + this.properties.getProperty(PROPERTY_FINAL_NAME) + \".jar\") .setProductVersion(this.properties.getProperty(PROPERTY_PRODUCT_VERSION)) .setBuildTimestamp(this.properties.getProperty(PROPERTY_BUILD_TIMESTAMP)) .setAuthor(this.properties.getProperty(PROPERTY_AUTHOR)) .setGlobalOptions(this.globalOptions) .setCommands(this.commands) .build(); helpPrinter.print(LoggerFactory.getLogger(\"HELP\")::info); } The code is extracted from the Hyperion application as I'm using it iself. With Maven and resource filtering I'm passing the information like the final name of the jar, the product version, the build timestamp and the author. For the logging I'm using a custom logger to avoid the usually timestamped output. At the time when I'm writing this documentation the result did look like following: java -jar hyperion-1.0.0-SNAPSHOT.jar [global options] [command [command options]] version: 1.0.0-SNAPSHOT, build timestamp: 2021-05-14 15:21 author: Thomas Lehmann <thomas.lehmann.private@gmail.com> Global options: -h, --help - displaying this help --third-party - displaying used 3rd party libraries List of available commands: run - Running one document with tasks to be processed Options for command 'run': -f<path>, --file=<path> - Document with tasks to be processed [required]","title":"Help printer"},{"location":"groovy/","text":"Welcome to the Groovy task Minimal example The minimal example does not require a variable but the task does have one (always) with the name ' default '. The default regex is the whole text, and the default group is 0. --- taskgroups: - title: test tasks: - type: groovy title: a simple example code: println 'hello world!' Example with variable The example with variable shows how to use the variable to extract information. It's exactly the same way as it does work for other tasks. You can specify the regex for filtering and - if required - the regex group; the default group is 0. --- taskgroups: - title: test tasks: - type: groovy title: a simple example code: println '---> this is a demo <---' variable: name: test2 regex: \">(.*)<\" group: 1 Example with templating The task group does store a map of key/value where key is the name of the variable, and the value is a variable. If you do not specify a name for a variable the name is ' default '. In the following example the first task does write 'hello world!' into the variable, and the second task does evaluate the value from the first task. Of course the second one write into the same variable its output since also there no name has been specified. --- taskgroups: - title: test tasks: - type: groovy title: a simple example 1 code: println 'hello world!' - type: groovy title: a simple example 2 code: println '{{ variables.default.value }}'","title":"Welcome to the Groovy task"},{"location":"groovy/#welcome-to-the-groovy-task","text":"","title":"Welcome to the Groovy task"},{"location":"groovy/#minimal-example","text":"The minimal example does not require a variable but the task does have one (always) with the name ' default '. The default regex is the whole text, and the default group is 0. --- taskgroups: - title: test tasks: - type: groovy title: a simple example code: println 'hello world!'","title":"Minimal example"},{"location":"groovy/#example-with-variable","text":"The example with variable shows how to use the variable to extract information. It's exactly the same way as it does work for other tasks. You can specify the regex for filtering and - if required - the regex group; the default group is 0. --- taskgroups: - title: test tasks: - type: groovy title: a simple example code: println '---> this is a demo <---' variable: name: test2 regex: \">(.*)<\" group: 1","title":"Example with variable"},{"location":"groovy/#example-with-templating","text":"The task group does store a map of key/value where key is the name of the variable, and the value is a variable. If you do not specify a name for a variable the name is ' default '. In the following example the first task does write 'hello world!' into the variable, and the second task does evaluate the value from the first task. Of course the second one write into the same variable its output since also there no name has been specified. --- taskgroups: - title: test tasks: - type: groovy title: a simple example 1 code: println 'hello world!' - type: groovy title: a simple example 2 code: println '{{ variables.default.value }}'","title":"Example with templating"}]}